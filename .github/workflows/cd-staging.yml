name: Deploy AI Platform to ECS Staging

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write


    steps:
      - name: checkout the repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: arn:aws:iam::024209611402:role/github-action-role
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2


      - name: Build and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ github.event.repository.name }}-staging-repo
        run: |
          docker build -t $REGISTRY/$REPOSITORY:latest ./backend
          docker push $REGISTRY/$REPOSITORY:latest

      - name: Run Database Migration
        run: |
          run_result=$(aws ecs run-task \
            --cluster ${{ github.event.repository.name }}-staging-cluster \
            --task-definition ${{ github.event.repository.name }}-db-migrate:1 \
            --count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-00dc34d75aaaee54a],securityGroups=[sg-087f3c6fb29311455],assignPublicIp=ENABLED}")
          echo ${run_result}
          container_arn=$(echo $run_result | jq '.tasks[0].taskArn' | sed -e 's/^"//' -e 's/"$//')
          aws ecs wait tasks-running --cluster ${{ github.event.repository.name }}-staging-cluster --tasks "${container_arn}"
          aws ecs wait tasks-stopped --cluster ${{ github.event.repository.name }}-staging-cluster --tasks "${container_arn}"
          
          # Check if migration was successful by examining task exit code
          task_status=$(aws ecs describe-tasks --cluster ${{ github.event.repository.name }}-staging-cluster --tasks "${container_arn}")
          exit_code=$(echo $task_status | jq '.tasks[0].containers[0].exitCode')
          
          if [ "$exit_code" != "0" ]; then
            echo "Database migration failed with exit code $exit_code"
            exit 1
          fi
          
          echo "Database migration completed successfully"

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster ${{ github.event.repository.name }}-staging-cluster --service ${{ github.event.repository.name }}-staging-service --force-new-deployment