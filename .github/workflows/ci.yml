name: Deploy AI Platform to ECS

on:
  push:
    branches:
      - test/ci

jobs:
  deploy-and-migrate:
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    steps:
      - name: Checkout the Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::024209611402:role/github-action-role
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ github.event.repository.name }}-repo
        run: |
          docker build -t $REGISTRY/$REPOSITORY:latest ./backend
          docker push $REGISTRY/$REPOSITORY:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ github.event.repository.name }}-cluster \
            --service ${{ github.event.repository.name }}-service \
            --enable-execute-command \
            --force-new-deployment \
            --region ap-south-1

      - name: Wait for ECS Service to Stabilize
        run: |
          echo "Waiting for ECS service to stabilize..."
          TIMEOUT=1200  # 20 minutes timeout
          INTERVAL=60   # Check every 30 seconds
          ELAPSED=0

          while [ $ELAPSED -lt $TIMEOUT ]; do
            STATUS=$(aws ecs describe-services \
              --cluster ${{ github.event.repository.name }}-cluster \
              --services ${{ github.event.repository.name }}-service \
              --region ap-south-1 \
              --query "services[0].status" --output text)

            if [[ "$STATUS" == "ACTIVE" ]]; then
              echo "ECS Service is now stable."
              exit 0
            fi

            echo "Waiting for ECS service... (Elapsed: $ELAPSED sec, Status: $STATUS)"
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          echo "ERROR: ECS service did not stabilize within $TIMEOUT seconds!"
          exit 1

      - name: Run Database Migration
        run: |
          echo "Fetching running ECS task ARN..."
          TASK_ARN=$(aws ecs list-tasks \
            --cluster ${{ github.event.repository.name }}-cluster \
            --service-name ${{ github.event.repository.name }}-service \
            --desired-status RUNNING \
            --query "taskArns[0]" --output text \
            --region ap-south-1)

          echo "Executing database migration inside ECS container..."
          aws ecs execute-command \
            --cluster ${{ github.event.repository.name }}-cluster \
            --task "$TASK_ARN" \
            --container ${{ github.event.repository.name }} \
            --command "uv run alembic upgrade head" \
            --interactive \
            --region ap-south-1
